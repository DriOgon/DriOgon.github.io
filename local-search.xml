<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>注册表引用文章</title>
    <link href="/2024/08/19/%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    <url>/2024/08/19/%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>引用文章</p><p><a href="https://blog.csdn.net/weixin_48230016/article/details/138599554">右键快捷方式问题1</a></p><p><a href="https://www.cnblogs.com/DriOgon/p/17986215">右键快捷方式问题2</a></p>]]></content>
    
    
    <categories>
      
      <category>注册表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈环境变量</title>
    <link href="/2024/08/19/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2024/08/19/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h1><p>现在，我想要用WIN+R运行qq程序，但正常来说是无法运行的，因此，需要额外配置环境变量。</p><span id="more"></span><p><img src="https://s2.loli.net/2024/07/18/MaQTWbviwqOYcf8.png" alt="image-20240718115635300"></p><p><img src="https://s2.loli.net/2024/07/18/KT5Qnqd6SyB4kmh.png" alt="image-20240718115726884"></p><h1 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2.环境变量"></a>2.环境变量</h1><h2 id="2-1-理论"><a href="#2-1-理论" class="headerlink" title="2.1 理论"></a>2.1 理论</h2><p>环境变量包括用户变量和系统变量，主要区别于它们的优先级和使用范围</p><ul><li><strong>用户变量</strong>仅对当前用户有效。每个用户都有自己的环境变量设置，这些设置不会影响其他用户。</li><li><strong>系统变量</strong>对所有用户有效。它们是全局的，系统中的所有用户都能访问这些变量。</li><li>当相同名称的用户变量和系统变量都存在时，&#x3D;&#x3D;用户变量的值会覆盖系统变量的值&#x3D;&#x3D;。</li></ul><p><code>Path</code> 变量是最常见的环境变量之一，用于指定系统和用户可以执行的命令的目录。将需要执行的程序的目录添加到 <code>Path</code> 变量可以使其在命令行中无需输入完整路径即可执行。</p><p><code>说人话就是，可添加目录的路径到PATH变量，输入命令xx时，系统将优先从用户变量的PATH变量中的路径中查找xx，没有找到的话，再从系统变量的PATH中查找，因此我们只需要在用户变量PATH中添加对应路径即可</code></p><p><img src="https://s2.loli.net/2024/07/18/jU5zD8nmkxMGY9V.png" alt="image-20240718202242796"></p><h2 id="2-2演示"><a href="#2-2演示" class="headerlink" title="2.2演示"></a>2.2演示</h2><ul><li>首先在设置中进入系统-&gt;系统信息-&gt;高级系统设置（我的设备是win11）</li></ul><p><img src="https://s2.loli.net/2024/07/18/k9MItJB8myZQFlv.png" alt="image-20240718202606207"></p><ul><li>接着进入环境变量</li></ul><p><img src="https://s2.loli.net/2024/07/18/nMFhT8fEKYyUprq.png" alt="image-20240718202745183"></p><ul><li>找到qq.exe所在的目录，可以右键桌面qq的快捷方式，找到文件所在位置，明显我的qq.exe所在目录是<code>C:\Program Files (x86)\Tencent\QQ\Bin</code>，复制下来。</li></ul><p><img src="https://s2.loli.net/2024/07/18/ZmQdsqoy9w7SAMJ.png" alt="image-20240718203013177"></p><ul><li>在环境变量中选择用户变量的PATH，将上述路径添加进去，并确定。</li></ul><p><img src="https://s2.loli.net/2024/07/18/RPL3BGSE4yvXOdw.png" alt="image-20240718203309706"></p><p><img src="https://s2.loli.net/2024/07/18/jCMo1VaOQkgWZ9e.png" alt="image-20240718203332444"></p><ul><li>接着使用WIN+R输入qq，就可以运行qq啦~</li><li>或者使用WIN+R输入cmd，在命令行中输入qq，同样也可以运行qq~</li></ul><p>关于环境变量的相关知识就等着聪明的你继续探索啦！</p>]]></content>
    
    
    <categories>
      
      <category>环境变量</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用文档</title>
    <link href="/2024/08/15/Hexo%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/"/>
    <url>/2024/08/15/Hexo%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Hexo 是一个基于 Node.js 的静态网站生成器，流行的博客框架。适用于创建个人博客。</p><span id="more"></span><p>特点：</p><ul><li>将 Markdown 文件转化为静态 HTML 页面。</li><li>生成的站点是纯静态的 HTML 文件，因此可以在任何支持静态内容的服务器上部署，如 <code>GitHub Pages</code>、<code>Netlify</code>、<code>Vercel</code> 等。</li><li><code>source</code> 目录是 Hexo 项目的内容根目录，因此当你引用图片等资源时，路径是相对 <code>source</code> 目录的。</li></ul><p>网站：</p><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo用户手册</a></li><li><a href="https://hexo.fluid-dev.com/docs/">Hexo-Fluid用户手册</a></li><li><a href="https://easyhexo.com/">Easy-Hexo</a></li></ul><p>他人网站：<br><a href="https://www.helloylh.com/">https://www.helloylh.com/</a><br><a href="https://alphax.top/">https://alphax.top/</a></p><p><a href="https://roife.github.io/about/">https://roife.github.io/about/</a></p><p><a href="https://www.ruanyifeng.com/">https://www.ruanyifeng.com/</a></p><p><a href="https://moechun.fun/">https://moechun.fun/</a></p><p>博客教程：<a href="https://blog.csdn.net/jj6666djdbbd/article/details/129321783">https://blog.csdn.net/jj6666djdbbd/article/details/129321783</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h1><h2 id="1-初始化和创建"><a href="#1-初始化和创建" class="headerlink" title="1.初始化和创建"></a>1.初始化和创建</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br>hexo <span class="hljs-keyword">new</span> [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>初始化一个新的项目</p><p>创建一篇新文章或页面</p><h2 id="2-清理"><a href="#2-清理" class="headerlink" title="2.清理"></a>2.清理</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> clean <span class="hljs-comment">#即 hexo c</span><br></code></pre></td></tr></table></figure><p>会删除缓存数据文件database（<code>db.json</code>）以及已生成的静态文件夹(<code>public</code>)</p><p>一般在更换主题theme时使用。 </p><h2 id="3-生成"><a href="#3-生成" class="headerlink" title="3.生成"></a>3.生成</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> generator <span class="hljs-comment">#即 hexo g</span><br></code></pre></td></tr></table></figure><p>生成静态文件夹<code>public</code></p><p>并将<code>source</code>目录下所有开头不是下划线的资源复制到<code>public</code>下。</p><p>细节：由于我使用的是fluid主题，每一个主题下都有自己的<code>source</code>目录，另外，主项目里也有<code>source</code>目录，因此当执行<code>hexo g</code>时，两个<code>source</code>目录的资源都会被复制到<code>public</code>下。</p><h2 id="4-本地服务器"><a href="#4-本地服务器" class="headerlink" title="4.本地服务器"></a>4.本地服务器</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#即 hexo s</span><br></code></pre></td></tr></table></figure><p>在本地启动一个 Web 服务器，以便预览生成的静态网站。</p><p>默认监听在 <code>http://localhost:4000</code> 端口上。</p><p>使用一些插件可以用来实时监控本地的修改内容，但是由于浏览器的缓存效果，实时监控的效果并不佳。</p><h2 id="5-部署"><a href="#5-部署" class="headerlink" title="5.部署"></a>5.部署</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hexo <span class="hljs-keyword">deploy</span> <span class="hljs-comment">#即 hexo d</span><br></code></pre></td></tr></table></figure><p>把生成的静态文件从 <code>public</code> 目录上传到目标服务器，通常是通过 Git 进行部署。</p><p>只有执行了这个命令，才能在公网的服务器上看见本地修改。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，当你修改了本地文件后，如果想要在网站看见修改内容，需要</p><ul><li>先执行<code>hexo g</code>生成本地静态文件</li><li>再执行<code>hexo d</code>部署到公网服务器上</li></ul><h1 id="三、Front-Matter"><a href="#三、Front-Matter" class="headerlink" title="三、Front Matter"></a>三、Front Matter</h1><ul><li>Front-matter 是文件开头的 YAML 或 JSON 代码块，用于配置写作设置。</li><li>YAML格式书写时，Front-matter 以三个破折号结束；（<a href="https://driogon.github.io/2024/08/14/Yaml%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/">Yaml语法参考</a>）</li><li>以 JSON 格式书写时，Front-matter 以三个分号结束。</li></ul><p>具体查看<a href="https://hexo.io/zh-cn/docs/front-matter">官方文档</a></p><h1 id="四、分类页"><a href="#四、分类页" class="headerlink" title="四、分类页"></a>四、分类页</h1><p>在文章前头加上<code>categories:</code></p><ul><li><p>单分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">语言语法</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/14/kYPDUoyFg4A9Q2u.png" alt="image-20240814114859751"></p></li><li><p>子分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">Linux</span>, <span class="hljs-string">Hexo</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/14/pg9ATtW4RHyqUV8.png" alt="image-20240814115059290"></p></li><li><p>并列分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> [<span class="hljs-string">Linux</span>]<br><span class="hljs-bullet">-</span> [<span class="hljs-string">Tools</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/14/lzGeMIS8bN9f7DY.png" alt="image-20240814115411702"></p></li><li><p>并列子分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> [<span class="hljs-string">Linux</span>, <span class="hljs-string">Hexo</span>]<br><span class="hljs-bullet">-</span> [<span class="hljs-string">Tools</span>, <span class="hljs-string">PHP</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/14/JBmZ23O9RdLTC8e.png" alt="image-20240814115550330"></p></li></ul><h1 id="五、添加评论功能"><a href="#五、添加评论功能" class="headerlink" title="五、添加评论功能"></a>五、添加评论功能</h1><p>hexo-fluid自带了常用评论插件</p><ul><li><p><strong>文章页</strong>。只需要根据主题配置文件的说明，配置好主题配置文件即可。<img src="https://s2.loli.net/2024/08/14/pJqNaoFH6VOx1nh.png" alt="image-20240814111246670"></p></li><li><p><strong>关于页</strong>。不需要配置主题配置文件，只需要在<code>\source\about\index.md</code>文件中的<a href="https://hexo.io/zh-cn/docs/front-matter">Front Matter</a>中加上<code>comment:type</code>键值对即可。</p><p><img src="https://s2.loli.net/2024/08/14/Niv6UnzkGBc8o3R.png" alt="image-20240814112100311"></p></li></ul><h1 id="六、开发网站时发现的小知识"><a href="#六、开发网站时发现的小知识" class="headerlink" title="六、开发网站时发现的小知识"></a>六、开发网站时发现的小知识</h1><h2 id="1-浏览器刷新，F5和Ctrl-F5的区别"><a href="#1-浏览器刷新，F5和Ctrl-F5的区别" class="headerlink" title="1.浏览器刷新，F5和Ctrl+F5的区别"></a>1.浏览器刷新，F5和Ctrl+F5的区别</h2><p><code>F5</code> 请求的是浏览器缓存</p><p>而 <code>Ctrl+F5</code> 是重新请求服务器资源，刷新掉浏览器的旧数据缓存</p><p>因此，在网站资源无法成功刷新时，选择<code>Ctrl+F5</code>进行刷新。</p><p>但是浏览器上的&#x3D;&#x3D;新无痕窗口&#x3D;&#x3D;才是最快反应更新内容的。(没有缓存)</p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><h1 id="To-do-list"><a href="#To-do-list" class="headerlink" title="To do list"></a>To do list</h1><ul><li>添加音乐播放器hexo-tag-aplayer</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习笔记</title>
    <link href="/2024/08/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/08/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习笔记"><a href="#机器学习笔记" class="headerlink" title="机器学习笔记"></a>机器学习笔记</h1><ul><li>通过模型和算法，训练数据（数据集），使得投喂未知数据样本（测试集）时，可以判断结果（标记label）<span id="more"></span></li><li>机器学习的目标是使得学到的模型能很好的适用于“新样本”,<br>而不仅仅是训练集合，我们称模型适用于新样本的能力为<em><strong>泛化</strong></em>(generalization)能力 </li><li>|f(x)-y|&lt;&#x3D;e f(x)是模型结果 y是真实值 所要做的就是努力缩小两者之间的差 </li><li>每个属性作为一个维度，想象成坐标的形式，最终的标签label，就可以指向，即视作一个向量。</li><li>模型假设、评价函数（损失&#x2F;优化目标）和优化算法是构成模型的三个关键要素。</li><li>决策树</li><li>神经网络</li><li>支持向量机SVM和核方法</li><li>深度学习</li></ul><p>预测内容及解决方法:</p><p>对于预测问题，可以根据预测输出的类型是连续的实数值，还是离散的标签，区分为回归任务和分类任务。</p><ul><li>分类问题(classification) <strong>二分类</strong>0&#x2F;1 多分类，多是离散值但可以用联系函数连续化。常见的联系函数是<img src="https://pic3.zhimg.com/v2-2ca2899406f46af41d50f06924bea49e_r.jpg" alt="Sigmoid函数（S形函数）中的最佳代表，即对数几率函数（Logistic Function）"><ul><li>决策树</li><li>贝叶斯</li><li>支持向量机</li><li>逻辑回归</li><li>集成学习</li></ul></li><li>回归(regression)<ul><li>线性回归（线性的，非线性的 二次，对数ln..  ），连续值</li><li>岭回归</li><li>Lasso回归</li></ul></li><li>聚类问题<ul><li>K-means</li><li>高斯混合聚类</li><li>密度聚类</li><li>层次聚类</li><li>谱聚类</li></ul></li></ul><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ul><li>样本(sample)</li><li>属性(attribute)&#x2F;特征(feature)</li><li>标记&#x2F;标签(label)</li><li>真相(ground truth) 标签y的真实值</li><li>预测(prediction) 根据得到的模型，投入测试集预测出f(x)</li><li>推理(inference) </li><li>数据集(data set) 数据集划分为三个内容</li><li>①训练集(training set) 用于确定模型参数。</li><li>②验证集(validation set) 用于调节模型超参数（如多个网络结构、正则化权重的最优选择）</li><li>③测试集(test set) 将其投入到最终生成的模型中，进行测试（跑分）</li><li>学习器(learner) 算法程序进行特征-&gt;标签的映射</li><li>监督学习(supervised learning) 训练时样本给定正常答案的label，用于训练模型</li><li>无监督学习(unsupervised learning) 样本是没有标定label的，多用于将样本分堆</li><li>半监督学习</li><li>假设函数（Hypothesis Function）假设函数是指，用数学的方法描述自变量和因变量之间的关系，它们之间可以是一个线性函数或非线性函数。 </li><li>损失函数（Loss Function）损失函数是指，用数学的方法衡量假设函数预测结果与真实值之间的误差。这个差距越小预测越准确，而算法的任务就是使这个差距越来越小。———-在回归问题中常用均方误差作为损失函数，而在分类问题中常用采用交叉熵（Cross-Entropy）作为损失函数</li><li>优化算法（Optimization Algorithm）</li></ul><h2 id="归纳偏好"><a href="#归纳偏好" class="headerlink" title="归纳偏好"></a>归纳偏好</h2><ul><li>没有免费的午餐 No Free Lunch </li><li>NFL定理：一个算法a如果在某些问题上比另一个算法b好，必然存在另一些问题，b比a好</li><li>所以要具体问题 具体分析</li></ul><h2 id="模型评估方法"><a href="#模型评估方法" class="headerlink" title="模型评估方法"></a>模型评估方法</h2><ul><li>k折交叉验证法</li><li>留出法</li><li>自助法</li></ul><h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><ul><li><em><strong>梯度下降法</strong></em> 确定损失函数，随机一个起始点，使学习率慢慢变小，使得梯度一直下降，直到近似拟合，找到全局最优点</li><li>一.批量梯度下降</li><li>二.随机梯度下降SGD<ul><li>由于参数每次只沿着梯度反方向更新一点点，因此方向并不需要那么精确。一个合理的解决方案是每次从总的数据集中随机抽取(可以先打乱样本np.shuffle,再顺序抽取minibatch)出小部分数据来代表整体，基于这部分数据计算梯度和损失来更新参数。</li><li>随机梯度下降加快了训练过程，但由于每次仅基于少量样本更新参数和计算损失ii，所以损失下降曲线会出现震荡。</li></ul></li><li>三.小批量梯度下降</li></ul><p>核心概念如下</p><ul><li>minibatch：每次迭代时抽取出来的一批数据被称为一个minibatch。</li><li>batch size：每个minibatch所包含的样本数目称为batch size。</li><li>Epoch：当程序迭代的时候，按minibatch逐渐抽取出样本，当把整个数据集都遍历到了的时候，则完成了一轮训练，也叫一个Epoch（轮次）。启动训练时，可以将训练的轮数num_epochs和batch_size作为参数传入。</li><li>也就是说 假设有400个样本，minibatch的size为40，需要遍历迭代10次才完成1轮epoch</li></ul><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><p>f(x)&#x3D;w1x1+w2x2+..+wdxd+b</p><p>向量形式即f(x)&#x3D;wTx+b 即模型要学习的参数是w,b</p><p>线性回归模型使用均方误差作为（Mean Squared Error，MSE）损失函数（Loss）</p><ul><li>线性回归的本质就是一个采用线性激活函数的全连接层（fully-connected layer） </li><li>最小二乘法  多元线性回归。用到求导&#x3D;0取极值的方法。但是这种方法只对线性回归这样简单的任务有效。如果模型中含有非线性变换，或者损失函数不是均方差这种简单的形式，则很难通过上式求解 就要用到普适的梯度下降法</li><li>对率回归 用回归的模型做二分类 可用极大似然法求解</li><li>线性判别分析 LDA （二分类）将二维的样例投影到一条直线上，实现降维。使同类样例的投影点尽可能接近，使异类样例的投影点尽可能远离</li><li>类别不平衡</li></ul><h2 id="决策树模型"><a href="#决策树模型" class="headerlink" title="决策树模型"></a>决策树模型</h2><p>决策树学习的关键在于如何选择最优划分属性，我们希望决策树的分支结点所包含的样本尽可能属于同一类别，即结点的“纯度”(purity)越来越高。有三种基本的划分选择</p><h3 id="划分选择"><a href="#划分选择" class="headerlink" title="划分选择"></a>划分选择</h3><ul><li>一信息增益 用到信息熵的概念 对每个属性求信息增益（差值），某属性a的信息增益越大，则意味着使用属性a来进行划分所获得的“纯度提升”越大，因此用属性a来分支的优先级更大</li><li>二增益率 用信息增益&#x2F;分支数，将两者结合，所想要的是信息增益高的同时，分支数尽量少。但并非绝对，所以使用了一个启发式：先从候选划分属性中找出信息增益高于平均水平的属性，再从中选取增益率最高的。</li><li>三基尼指数</li></ul><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><p>“剪枝”是决策树学习算法对付“过拟合”的主要手段。</p><p>即可通过“剪枝”来一定程度避免因决策分支过多，以致于把训练集自身的一些特点当做所有数据都具有的一般性质而导致的过拟合</p><ul><li>预剪枝 生成决策树的同时剪枝</li><li>后剪枝 生成完整决策树后，再剪枝</li></ul><p>需要评估剪枝前后决策树的优劣性</p><h3 id="样本缺失值的处理"><a href="#样本缺失值的处理" class="headerlink" title="样本缺失值的处理"></a>样本缺失值的处理</h3><p>思路：样本赋权，权重划分..</p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><ul><li>多用于图像识别分类领域</li><li>卷积核</li><li>卷积-（激活函数）-池化- 卷积-池化—–最后全连接神经网络</li></ul><h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2>]]></content>
    
    
    <categories>
      
      <category>实验室</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种库的基本语法</title>
    <link href="/2024/08/14/%E5%90%84%E7%A7%8D%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/08/14/%E5%90%84%E7%A7%8D%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="各种库的基本语法"><a href="#各种库的基本语法" class="headerlink" title="各种库的基本语法"></a>各种库的基本语法</h1><h2 id="numpy库"><a href="#numpy库" class="headerlink" title="numpy库"></a>numpy库</h2><p>具体可见<a href="https://aistudio.baidu.com/projectdetail/7368802">飞桨的numpu库介绍</a></p><span id="more"></span><p>有数组array,和python的序列一样，有切片和索引，但是不一样的是，array所有操作都是在原数组上进行的，即原数组会被改变 </p><ul><li>广播功能<ul><li>一方面可以扩展参数的维度,代替for循环来计算1个样本对从w0到w12的所有参数的梯度</li><li>另一方面可以扩展样本的维度，代替for循环来计算样本0到样本403对参数的梯度</li></ul></li><li>一.创建数组<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import numpy as np #起别名np<br><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[1,3,4]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a)</span></span><br><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>))<br>c = np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>) <span class="hljs-selector-id">#arrage</span> 即 <span class="hljs-selector-tag">a</span>(array)+range 与上面的range作用和用法一样 <br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.dtype)</span></span> <span class="hljs-selector-id">#dtype</span> 即二进制类型 包括int32,int64,float64,bool.......<br><br>#修改已有数组的二进制类型<br>d = c<span class="hljs-selector-class">.astype</span>(<span class="hljs-string">&quot;float64&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d.dtype)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">100</span>)</span></span><br>#创建数组时指定二进制数据类型<br>e = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[0,1,2,4]</span>,dtype=<span class="hljs-string">&quot;float64&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(e)</span></span><br>f = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[0,1,2,4]</span>,dtype=<span class="hljs-string">&quot;bool&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(f)</span></span><br><br></code></pre></td></tr></table></figure></li><li>二.数组的形状np.shape<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><span class="hljs-punctuation">#</span>一.查看数组形状g.shape<br>g = np.array([0,1,2,3,4,5])<br>print(g.shape) <span class="hljs-punctuation">#</span><span class="hljs-params">(6,)</span> <br>h = np.array([[0,1,2],[3,4,5]])<br>print(h.shape) <span class="hljs-punctuation">#</span><span class="hljs-params">(2, 3)</span><br>print(h.shape[0]) <span class="hljs-punctuation">#</span>2<br>print(h.shape[1]) <span class="hljs-punctuation">#</span>3<br><span class="hljs-punctuation">##</span>笔记<br><span class="hljs-punctuation">##</span> 1.故g.shape的结果有几个数，g数组就有几维。其中若只有一个数字，则该数字也表示数组中元素的个数<br><span class="hljs-punctuation">##</span> 2.若只有一行，即只有一维,h.shape[0]表示总个数<br><span class="hljs-punctuation">##</span> 3.若有两维则h.shape[0]表示行数,h.shape[1]表示列数。也可以有三维...<br>注意：（0 行数，1 列数）axis轴，axis=0就是行数的轴，即竖直方向|.axis=1就是列数的轴，即水平方向——<br>a[:,np.newaxis] 表示使a序列上升一个维度，例如一维升二维<br><br><span class="hljs-punctuation">#</span>二.修改数组形状h.reshape() ，也可以是h.reshape([])<br>h.reshape(6,) <span class="hljs-punctuation">#</span><span class="hljs-keyword">array</span><span class="hljs-params">([0, 1, 2, 3, 4, 5])</span><br>print(h) <span class="hljs-punctuation">#</span>[[0 1 2]<br>         <span class="hljs-punctuation">#</span> [3 4 5]]<br>h = h.reshape(6,)<br>print(h) <span class="hljs-punctuation">#</span>[0 1 2 3 4 5]<br><span class="hljs-punctuation">##</span>笔记<br><span class="hljs-punctuation">##</span> 1.h.reshape()是不改变原数组的形状，只是返回一个改变形状的数组，要赋值h = h.reshape(6,)才能使原数组改变形状。--当然行列乘积要等于总数<br><span class="hljs-punctuation">##</span> 2.所以如果想要一个数组快速的在某一个范围内形成二维数组可以在形成数组时就改变它的形状，具体如下<br><br>i = np.array(range(100,150)).reshape(5,10) <span class="hljs-punctuation">#</span>[100,150) 五行十列<br>print(i)<br>&#x27;&#x27;&#x27;<br>[[100 101 102 103 104 105 106 107 108 109]<br> [110 111 112 113 114 115 116 117 118 119]<br> [120 121 122 123 124 125 126 127 128 129]<br> [130 131 132 133 134 135 136 137 138 139]<br> [140 141 142 143 144 145 146 147 148 149]]<br>&#x27;&#x27;&#x27;<br><br></code></pre></td></tr></table></figure></li><li>三.array索引与切片</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> numpy as np<br><br><span class="hljs-comment">#索引是从0开始的</span><br><span class="hljs-attribute">a</span> = np.arange(<span class="hljs-number">24</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)<br><span class="hljs-comment"># 相当于 a = np.array(range(24)).reshape(4,6)</span><br><span class="hljs-attribute">print</span>(a)<br><span class="hljs-comment">#取行</span><br><span class="hljs-attribute">a</span>[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">#取连续多行，前闭后开</span><br><span class="hljs-attribute">a</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br><span class="hljs-attribute">a</span>[:<span class="hljs-number">3</span>] #表示[<span class="hljs-number">0</span>，<span class="hljs-number">3</span>)<br><span class="hljs-attribute">a</span>[<span class="hljs-number">1</span>:] #表示<span class="hljs-number">1</span>到末尾<br><br><span class="hljs-comment">#取不连续的多汗</span><br><span class="hljs-attribute">a</span>[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><br><span class="hljs-comment">#通用的行列取法,a[l,r]逗号左边是行，右边是列。冒号指所有</span><br><br><span class="hljs-comment">#取列 </span><br><span class="hljs-attribute">a</span>[:,<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">#取连续多列</span><br><span class="hljs-attribute">a</span>[:,<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">#取不连续的多列</span><br><span class="hljs-attribute">a</span>[:,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><br><span class="hljs-comment">#取某个值 3行4列的交点</span><br><span class="hljs-attribute">a</span>[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><br><span class="hljs-comment">#取多行多列的交集</span><br><span class="hljs-attribute">a</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>,<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br><br></code></pre></td></tr></table></figure><ul><li><p>四 随机数 np.random</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1</span>. 随机创建数组<br>a = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>输出如下:得到<span class="hljs-number">3</span>*<span class="hljs-number">3</span>的数组<br>array([[<span class="hljs-number">0.27838268</span>, <span class="hljs-number">0.59910705</span>, <span class="hljs-number">0.97848588</span>],<br>       [<span class="hljs-number">0.0785898</span> , <span class="hljs-number">0.92671863</span>, <span class="hljs-number">0.98556855</span>],<br>       [<span class="hljs-number">0.71094793</span>, <span class="hljs-number">0.56055373</span>, <span class="hljs-number">0.9365632</span> ]])<br>#还有很多，正态分布等等<br><br><span class="hljs-number">2</span>.随机打乱<br><span class="hljs-number">3</span>.随机选取元素<br>a = np.arange(<span class="hljs-number">30</span>)<br>b = np.random.choice(a, size=<span class="hljs-number">5</span>)<br>b # array([<span class="hljs-number">23</span>,  <span class="hljs-number">3</span>, <span class="hljs-number">29</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>]) 从a中随机选<span class="hljs-number">5</span>个数给b<br><br>np.random.randn(x,y) 表示生成x行y列的随机数，生成数在均值为<span class="hljs-number">0</span>的左右浮动<br><br></code></pre></td></tr></table></figure></li><li><p>五保存和导入文件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">例如<br><span class="hljs-meta"># 使用np.fromfile从文本文件<span class="hljs-string">&#x27;housing.data&#x27;</span>读入数据</span><br><span class="hljs-meta"># 这里要设置参数sep = <span class="hljs-string">&#x27; &#x27;</span>，表示使用空白字符来分隔数据</span><br><span class="hljs-meta"># 空格或者回车都属于空白字符，读入的数据被转化成1维数组</span><br>d = np.fromfile(<span class="hljs-string">&#x27;./work/housing.data&#x27;</span>, sep = <span class="hljs-string">&#x27; &#x27;</span>)<br>d<br>array([<span class="hljs-number">6.320e-03</span>, <span class="hljs-number">1.800e+01</span>, <span class="hljs-number">2.310e+00</span>, ..., <span class="hljs-number">3.969e+02</span>, <span class="hljs-number">7.880e+00</span>,<br>       <span class="hljs-number">1.190e+01</span>])<br></code></pre></td></tr></table></figure></li><li><p>六.数组的计算</p></li></ul><p>1.数组t1与数字a可以进行加减乘除等运算，即t1中的每个数都与a作运算<br>2.数组t1和t2只要有一个维度相等就可以做运算</p><ul><li>七.数学与统计方法函数</li></ul><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs leaf">import numpy as np<br><br>h = np.array([[0,1,2],[3,4,5]])<br>print(h)<br>h.mean() <span class="hljs-punctuation">#</span>相加后求平均值 =np.mean(h)<br>h.sum()  <span class="hljs-punctuation">#</span>求和     =np.sum(h)<br>h.max()  <span class="hljs-punctuation">#</span>求最大   =np.max(h)<br>h.min()  <span class="hljs-punctuation">#</span>求最小   =np.min(h)<br><br><span class="hljs-punctuation">#</span>都可以指定轴axis<br>h.mean(axis=0)<br>h.mean(axis=1)<br>h.sum(axis=0) <span class="hljs-punctuation">#</span><span class="hljs-keyword">array</span><span class="hljs-params">([3, 5, 7])</span> 即行数 竖直方向求和<br>h.sum(axis=1) <span class="hljs-punctuation">#</span><span class="hljs-keyword">array</span><span class="hljs-params">([ 3, 12])</span>  即列数 水平方向求和<br>h.max(axis=0) <span class="hljs-punctuation">#</span><span class="hljs-keyword">array</span><span class="hljs-params">([3, 4, 5])</span><br>h.min(axis=0) <span class="hljs-punctuation">#</span><span class="hljs-keyword">array</span><span class="hljs-params">([0, 1, 2])</span> 还有其他方法...<br><br>np.zero(x,y)  <span class="hljs-punctuation">#</span>创建一个x行y列的全零数组 后续可用于存数据<br><br></code></pre></td></tr></table></figure><ul><li>八.线性代数相关函数<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr"># 例如矩阵相乘 32</span>*<span class="hljs-number">23</span> = <span class="hljs-number">33</span><span class="hljs-comment">(三行二列*二行三列 = 三行三列)</span><br>x.dot<span class="hljs-comment">(y)</span> <span class="hljs-attr"># = np.dot(x,y)</span><br><span class="hljs-attr"></span><br></code></pre></td></tr></table></figure></li><li>九.可以用于计算激活函数Sigmoid和ReLU….</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># <span class="hljs-keyword">x</span>是<span class="hljs-number">1</span>维数组，数组大小是从<span class="hljs-number">-10</span>. 到<span class="hljs-number">10</span>.的实数，每隔<span class="hljs-number">0.1</span>取一个点<br><span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> np.arange(<span class="hljs-number">-10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.1</span>)<br># 计算 Sigmoid函数<br>s <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span> / (<span class="hljs-number">1</span> + np.exp(- <span class="hljs-keyword">x</span>)) # np.exp(<span class="hljs-keyword">x</span>) 用于求ex<br><br># 计算ReLU函数<br>y <span class="hljs-operator">=</span> np.clip(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> a_min <span class="hljs-operator">=</span> <span class="hljs-number">0</span>.<span class="hljs-punctuation">,</span> a_max <span class="hljs-operator">=</span> None) #np.clip(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span>a_min<span class="hljs-punctuation">,</span>a_max<span class="hljs-punctuation">,</span>out) 用于限制<span class="hljs-keyword">x</span>的范围在<span class="hljs-keyword">min</span>和<span class="hljs-keyword">max</span>之间，小于<span class="hljs-keyword">min</span>的就赋值为<span class="hljs-keyword">min</span>，大于<span class="hljs-keyword">max</span>的就赋值为<span class="hljs-keyword">max</span><br></code></pre></td></tr></table></figure><ul><li>十.也可以对图片进行一些操作 读入图片——图片的每个像素点就是一个元素，可以使矩阵数组化 图片水平垂直翻转和裁剪（需要配合其他库）</li></ul><h2 id="json库"><a href="#json库" class="headerlink" title="json库"></a>json库</h2><p>主要的方法是json.loads(),json.dumps()</p><ul><li>json.loads() 把json字符串格式文件，转换成python类型的数据。 一个解码</li><li>json.dumps() 把python类型的数据转换成json字符串            一个编码<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-class"><span class="hljs-keyword">data</span> = &#x27;&#x27;&#x27;</span><br>[&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>    <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-string">&quot;170&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;18&quot;</span><br>&#125;, &#123;<br>     <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小红&quot;</span>,<br>    <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-string">&quot;165&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;20&quot;</span><br>&#125;]<br><span class="hljs-string">&#x27;&#x27;</span>&#x27;<br><br><span class="hljs-meta"># 打印data类型</span><br><span class="hljs-title">print</span>(<span class="hljs-class"><span class="hljs-keyword">type</span>(<span class="hljs-title">data</span>))</span><br><span class="hljs-meta"># json类型的数据转化为python类型的数据</span><br><span class="hljs-title">new_data</span> = json.loads(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><span class="hljs-meta"># 获取内容</span><br><span class="hljs-title">name</span> = new_data[<span class="hljs-number">0</span>][&#x27;name&#x27;]<br><span class="hljs-title">new_name</span> = new_data[<span class="hljs-number">0</span>].get(&#x27;name&#x27;)<br><span class="hljs-meta"># 打印转换后data类型</span><br><span class="hljs-title">print</span>(<span class="hljs-class"><span class="hljs-keyword">type</span>(<span class="hljs-title">new_data</span>))</span><br><br><span class="hljs-title">print</span>(name)<br><span class="hljs-title">print</span>(new_name)<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>实验室</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基本语法</title>
    <link href="/2024/08/14/Linux%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/08/14/Linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>Linux的路径是斜杠&#x2F; ， windows的路径是反斜杠C:\<span id="more"></span></li><li>Linux根目录就是&#x2F;  </li><li>Linux的home目录就是~，即&#x2F;home&#x2F;用户名</li><li><code>.</code>表示当前工作目录</li><li><code>*</code>表示通配符，用于模糊匹配 （例如 test *即匹配出test开头的所有文件）</li><li>root表示超级管理员用户  使用<code>su root</code>可切换root用户 （su即switch user）  exit退出该用户</li><li><code>sudo 命令</code> 即以管理员身份运行 （super user do）</li><li><code>&gt; &gt;&gt;</code>表示重定向符 </li><li><code>|</code> 表示管道符  将管道符左边命令的结果，作为右边命令的输入</li><li><code>$ 环境变量名</code> 美刀符 表示取环境变量的值</li></ul><h2 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1.快捷键"></a>1.快捷键</h2><ul><li>清屏快捷键 ctrl+l 或 clear</li><li>强制退出命令 ctrl+c</li><li>history查看历史命令</li></ul><h2 id="2-Linux基本命令"><a href="#2-Linux基本命令" class="headerlink" title="2.Linux基本命令"></a>2.Linux基本命令</h2><p>基础格式 <code>command [-options] [parameter]</code>  中括号[]表示非必须</p><ul><li>command即命令本身</li><li>options即命令选项，因为某些命令是有多种功能的，需要选择，许多都是可以叠加使用的</li><li>parameter即命令参数，多数是命令的指向目标</li></ul><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p><code>ls [-a -l -h] [路径]</code></p><ul><li>横向列出文件list</li><li>ls -a 列出全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>ls -l 竖向列出文件 相当于<code>ll</code></li><li>ls -al    a和l组合</li></ul><h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><p><code>cd [绝对路径或相对路径]</code>  切换当前工作目录Change Directory </p><ul><li>如果直接cd，则回到home目录即 &#x2F;home&#x2F;用户名</li><li>cd .. 返回上一级目录</li><li>cd ..&#x2F;..  返回上两级目录</li></ul><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p><code>pwd</code> 输出当前工作目录Print Working Directory </p><h3 id="mkdir-rmdir命令"><a href="#mkdir-rmdir命令" class="headerlink" title="mkdir-rmdir命令"></a>mkdir-rmdir命令</h3><p><code>mkdir [] 路径</code> 创建目录Make Directory</p><p><code>rmdir [] 路径</code> 删除目录Remove Directory</p><ul><li>mkdir -p 表示创建多层目录</li></ul><h3 id="touch-cat-more命令"><a href="#touch-cat-more命令" class="headerlink" title="touch-cat-more命令"></a>touch-cat-more命令</h3><p><code>touch [] 文件名</code>创建文件</p><p><code>cat [] 文件名</code>查看文件内容</p><p> <code>more</code>查看文件内容，可翻页</p><h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><p><code>cp [] 源文件s 目的地文件d</code>   用于复制文件或文件夹</p><ul><li>cp -r 复制文件夹 r表示递归</li></ul><h3 id="mv-rm命令"><a href="#mv-rm命令" class="headerlink" title="mv-rm命令"></a>mv-rm命令</h3><p><code>mv 源文件s 目的地文件d</code>  用于移动文件或文件夹，或修改名称move</p><p><code>rm [-r -f] 文件</code>    用于删除多个文件或文件夹remove</p><ul><li>rm -r 表示删除文件夹 r表示递归</li><li>rm -f 表示force强制删除 可理解为以管理员身份删除</li><li>因此有一个命令是 <code>rm -rf /*</code> 即强制删除根目录下所有文件夹</li></ul><h3 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h3><p><code>ln -s 参数1 参数2</code></p><ul><li>-s 表示建立软链接 set up</li><li>参数1 是想被链接到的路径</li><li>参数2是该软链接被创建的地方</li></ul><p>例如 <code>ln -s ~/Desktop ~/hhh/1</code>，就是想创建一个链接到Desktop的软链接，并将该软链接创建为~&#x2F;hhh&#x2F;1</p><h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p><code>find 起始路径 [-name ] &quot;文件名称&quot;</code>  查找文件</p><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p><code>echo  &quot;Hello world&quot; &gt;&gt; 指定文件中的路径</code></p><ul><li>即helloworld 写进指定文件中，如果不存在该文件，则新建一个</li></ul><h3 id="vim命令"><a href="#vim命令" class="headerlink" title="vim命令"></a>vim命令</h3><p> <code>vim 文件名</code>  （vim是一种文本编辑器，若该文件不存在则新建一个，并进入文件）</p><ul><li>进入时是命令模式，输入<code>i</code>进入输入模式，在输入模式点击esc则返回命令模式</li><li>在命令模式下点击<code>:</code> 进入底线命令模式，也就是在底部输入命令</li><li>底线命令下<code>:wq</code>即写入并退出vim编辑器 write quit</li><li>命令模式下的一些命令<ul><li>未完待续…..</li></ul></li></ul><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p><code>grep 关键字 文件路径</code> 查找文件中的关键字</p><ul><li>文件路径的参数2可作为内容输入端口，即可使用管道符</li><li><code>cat test.txt | grep hello</code> 即在test.txt的内容中查找hello关键词</li><li><code>ls | grep hello</code> 即在ls的内容中查找hello关键词</li><li><code>ll /usr/bin | grep z</code> 同理在ll &#x2F;usr&#x2F;bin 的内容中查找z关键词</li></ul><h3 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h3><p><code>wc  [-m -l -w] 文件路径</code> WordCount用于统计文件中的内容</p><ul><li>文件路径同样可作为内容输入端口</li><li>-m 统计字符数量</li><li>-l 统计行数</li><li>-w 统计单词数量 根据空格区分单词</li><li><code>cat test.txt | wc </code> 即在test.txt的内容中，统计</li></ul><h2 id="3-文件权限信息"><a href="#3-文件权限信息" class="headerlink" title="3.文件权限信息"></a>3.文件权限信息</h2><p><img src="https://s2.loli.net/2024/07/09/lEnGzdMLVoqSB9A.png" alt="image-20240709001152920"></p><ul><li>序号1 表示文件、文件夹的权限控制信息</li><li>序号2 表示文件、文件夹所属用户</li><li>序号3 表示文件、文件夹所属用户组</li></ul><p><img src="https://s2.loli.net/2024/07/09/Fby8pmIRj4nGkwA.png" alt="image-20240709001946290"></p><ul><li><p>即最前面的序号1中有10个字母位</p></li><li><p>最前面的一个字母</p><ul><li>d表示文件夹directory</li><li>-表示文件</li><li>l表示软连接link</li></ul></li><li><p>另外9个三个分为一组,可利用二进制变成数字序号 (8)421 r&#x3D;4，w&#x3D;2，o&#x3D;1</p><p>*<img src="https://s2.loli.net/2024/07/09/rXCRVdNE1Ts7Jon.png" alt="image-20240709005523264"></p><ul><li>因此777就是最危险的rwx rwx rwx 给予所有用户全部权限</li></ul></li><li><p>另外rwx的权限含义</p><ul><li>r可读权限read 即可用ls命令</li><li>w可写权限write</li><li>x可执行权限exe 即可用cd命令</li></ul></li></ul><h3 id="chmod修改权限命令"><a href="#chmod修改权限命令" class="headerlink" title="chmod修改权限命令"></a>chmod修改权限命令</h3><p>即change mode </p><ul><li><p><code>chmod [-R] 权限 文件或文件夹</code></p><ul><li><p>例如&#x3D;&#x3D;chmod u&#x3D;rwx,g&#x3D;r,o&#x3D;x test2&#x3D;&#x3D;   即&#x3D;&#x3D;chmod 741 test2&#x3D;&#x3D;</p><p>u即user，g即groups，o即others，</p><p>也就是用户权限rwx，用户组权限r–，其他用户权限–x</p></li></ul></li></ul><h3 id="chown修改用户-组-命令"><a href="#chown修改用户-组-命令" class="headerlink" title="chown修改用户(组)命令"></a>chown修改用户(组)命令</h3><p>即change owner</p><h2 id="4-安装应用"><a href="#4-安装应用" class="headerlink" title="4.安装应用"></a>4.安装应用</h2><p>CentOSs使用yum管理器，应用格式是.rpm</p><p>Ubuntu使用apt管理器，应用格式是.deb</p><h3 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h3><p>rpm包软件管理器，需要root权限，需要联网</p><ul><li><code>yum [-y] [install  |  remove  |  search ] 软件名称</code></li></ul><h3 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h3><p>下载文件</p><h2 id="5-管理服务"><a href="#5-管理服务" class="headerlink" title="5.管理服务"></a>5.管理服务</h2><h3 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h3><p>即system control，用于控制一些服务的开关，自启动</p><ul><li>systemctl [start | stop |  status |  enable |  disable] 服务名<ul><li>start启动 | stop关闭 |  status查看状态 |  enable开启开机自启动 |  disable关闭开机自启动</li><li>服务.service<ul><li>networkManager主网络服务</li><li>network副网络服务</li><li>firewalld防火墙服务</li><li>sshd即ssh服务</li></ul></li></ul></li></ul><h2 id="6-修改主机名"><a href="#6-修改主机名" class="headerlink" title="6.修改主机名"></a>6.修改主机名</h2><ul><li>hostnamectl set-hostname 主机名</li><li>要root权限</li></ul><h2 id="7-端口"><a href="#7-端口" class="headerlink" title="7.端口"></a>7.端口</h2><ul><li>公认端口0~1023<ul><li>ftp-21</li><li>ssh-22</li><li>smtp-25</li><li>dns-53</li><li>http-80</li><li>https-443</li></ul></li></ul><h3 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h3><ul><li>用于查看端口</li></ul><h2 id="8-进程"><a href="#8-进程" class="headerlink" title="8.进程"></a>8.进程</h2><h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><p><code>ps -ef </code>process show 显示所有进程</p><p><code>ps -ef | grep 关键词</code> 用grep来查找关键词</p><h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h3><p><code>kill -9 进程号</code> 强制关闭指定进程</p><h2 id="9-环境变量"><a href="#9-环境变量" class="headerlink" title="9.环境变量"></a>9.环境变量</h2><h3 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h3><ul><li>查看环境变量</li><li>使用键值对表示 key-value</li><li><code>echo $PATH</code> 表示取环境变量的值 </li><li><code>echo $&#123;PATH&#125;</code>也可以用<code>&#123;&#125;</code>括起来变量名</li></ul><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li>在指定文件中输入<code>export 变量名=变量值</code> 并再执行<code>source 配置文件名</code>,使其生效<ul><li>针对当前用户，配置在~&#x2F;.bashrc文件中</li><li>针对所有用户，配置在&#x2F;etc&#x2F;profile文件中</li></ul></li><li>可以自己写一个简单的脚本，在全局都可以执行<ul><li>先创建文件夹<code>mkdir mkenv</code></li><li>再创建文件<code>vim mk666</code></li><li>在mk666文件里输入命令<code>echo 666</code> 保存并退出</li><li>将mk666的权限改成x(可执行),使其成为脚本文件<code>chmod 755 mk666</code></li><li><code>./mk666</code>就可以输出666</li><li>但还要改一下PATH变量，使其能够全局执行</li><li>在root下执行<code>vim /etc/profile</code>，并加上命令<code>export PATH=$PATH:/home/admin/mkenv</code></li><li>最后再执行<code>source /etc/profile</code>，就可实现脚本命令的全局化</li></ul></li></ul><h2 id="10-压缩和解压"><a href="#10-压缩和解压" class="headerlink" title="10.压缩和解压"></a>10.压缩和解压</h2><p>linux系统中通常用tar和gzip</p><ul><li>.tar</li><li>.tar.gz或.gz</li></ul><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3>]]></content>
    
    
    <categories>
      
      <category>语言语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基本语法</title>
    <link href="/2024/08/14/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/08/14/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python基本语法"><a href="#Python基本语法" class="headerlink" title="Python基本语法"></a>Python基本语法</h1><p>首先，Python与其他语言区别很大的地方</p><span id="more"></span><ul><li><p>name 与 object 直接匹配 根本不用定义变量类型 </p></li><li><p>不用分号，用回车&#x2F;换行代替分号</p></li><li><p>代码块不使用大括号 <em><em>{}<strong>，而是用</strong></em>缩进</em>**写模块</p></li><li><p>缩进用tab，取消缩进用shift+tab</p></li><li><p>常见单词</p><ul><li>parameters：形参</li><li>arguments： 实参   无歧义时可视为参数</li><li>attribute:  属性</li><li>module:     模块</li></ul></li></ul><p>运算符</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>(<span class="hljs-number">7</span>/<span class="hljs-number">3</span>)   #<span class="hljs-number">2</span>.<span class="hljs-number">3333333333333335</span>  正常的除法<br><span class="hljs-attribute">print</span>(<span class="hljs-number">7</span>//<span class="hljs-number">3</span>)  #<span class="hljs-number">2</span> 整除 向下取整<br><span class="hljs-attribute">print</span>(<span class="hljs-number">2</span>**<span class="hljs-number">3</span>)  #<span class="hljs-number">8</span> <span class="hljs-number">2</span>的<span class="hljs-number">3</span>次方 幂运算<br><br><span class="hljs-attribute">and</span> #即&amp;&amp;<br><span class="hljs-attribute">or</span>  #即||<br><span class="hljs-attribute">not</span> #即!<br></code></pre></td></tr></table></figure><p>一些内置函数</p><ul><li><p>数学运算</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">abs</span><span class="hljs-params">()</span></span>        求绝对值<br><span class="hljs-function"><span class="hljs-title">round</span><span class="hljs-params">(num)</span></span>   求近似整数<br><span class="hljs-function"><span class="hljs-title">round</span><span class="hljs-params">(num,n)</span></span> 保留n位小数<br><span class="hljs-function"><span class="hljs-title">pow</span><span class="hljs-params">()</span></span>        求次方<br><span class="hljs-function"><span class="hljs-title">divmod</span><span class="hljs-params">(x,y)</span></span>  求x/y的商和余数 构成的元组<br><span class="hljs-function"><span class="hljs-title">min</span><span class="hljs-params">()</span></span>        求最小值<br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">()</span></span>        求最大值<br><span class="hljs-function"><span class="hljs-title">sum</span><span class="hljs-params">()</span></span>        求和<br><span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">()</span></span>       执行一个字符串表达式<br></code></pre></td></tr></table></figure></li><li><p>random库 随机数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> random<br><span class="hljs-attribute">print</span>(random.random())               # 产生 <span class="hljs-number">0</span> 到 <span class="hljs-number">1</span> 之间的随机浮点数<br><span class="hljs-attribute">print</span>( random.uniform(<span class="hljs-number">1</span>.<span class="hljs-number">1</span>,<span class="hljs-number">5</span>.<span class="hljs-number">4</span>) )     # 产生  <span class="hljs-number">1</span>.<span class="hljs-number">1</span> 到 <span class="hljs-number">5</span>.<span class="hljs-number">4</span> 之间的随机浮点数<br><span class="hljs-attribute">print</span>( random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>) )        # 产生 <span class="hljs-number">1</span> 到 <span class="hljs-number">10</span> 的一个整数型随机数 <br><br><span class="hljs-attribute">a</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]                        # 将序列a中的元素随机打乱<br><span class="hljs-attribute">random</span>.shuffle(a)<br><span class="hljs-attribute">print</span>(a)<br><br><span class="hljs-attribute">print</span>( random.randrange(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">2</span>) )   # 生成从<span class="hljs-number">1</span>到<span class="hljs-number">100</span>的间隔为<span class="hljs-number">2</span>的随机整数<br><span class="hljs-attribute">print</span> (random.choice(&#x27;cyl&#x27;))         # 生成随机字符<br><br><span class="hljs-attribute">random</span>.seed(x) 表示设置随机数种子 种子x相同时，每次产生的随机数也都相同<br><span class="hljs-attribute">tips</span>:如果不设置种子，默认情况下，随机数生成器将使用系统时间作为种子，因此每次运行程序时都会生成不同的随机数序列。<br></code></pre></td></tr></table></figure></li><li><p>其他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-built_in">int</span>(x)   <span class="hljs-comment">#char-&gt;int</span><br>a = <span class="hljs-built_in">chr</span>(num)   <span class="hljs-comment">#int-&gt;char</span><br><span class="hljs-built_in">len</span>()  求长度<br><span class="hljs-built_in">type</span>() 查看变量的数据类型<br><span class="hljs-built_in">id</span>()   查看变量的内存地址<br><span class="hljs-built_in">range</span>(x,y) 创建整数列表 [x,y) x到y-<span class="hljs-number">1</span>的范围 若<span class="hljs-built_in">range</span>(x) 即<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,x) 即[<span class="hljs-number">0</span>,x)<br><span class="hljs-built_in">zip</span>() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象 可以使用 <span class="hljs-built_in">list</span>() 转换来输出列表<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h2><ul><li><p>单行注释    </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 这是单行注释</span><br><span class="hljs-meta"># 这是单行注释</span><br></code></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">这是多行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-输入输出"><a href="#2-输入输出" class="headerlink" title="2.输入输出"></a>2.输入输出</h2><ul><li>输入input</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">x = <span class="hljs-keyword">input</span>(&quot;提示文字:&quot;)  #x默认是字符型str类型<br>强转 <br>num = <span class="hljs-type">int</span>(x)   #<span class="hljs-type">char</span>-&gt;<span class="hljs-type">int</span><br>a = chr(num)       #<span class="hljs-type">int</span>-&gt;<span class="hljs-type">char</span><br><br>age = <span class="hljs-type">int</span>(<span class="hljs-keyword">input</span>(&quot;请输入年龄：&quot;))  #或者直接强转<br></code></pre></td></tr></table></figure><ul><li>输出print</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span>()函数是一个标准格式化输出函数<br><span class="hljs-built_in">print</span>(value, <span class="hljs-attribute">sep</span>=’ ’,end（）=’\n’, file = sys.stdout, flush = <span class="hljs-literal">False</span>)<br>sep:分隔符 默认空格  <br>end:尾打印 默认换行 所以每次一个<span class="hljs-built_in">print</span>()后都会自动换行 <br>后面两个基本不用<br><br></code></pre></td></tr></table></figure><p>字符串格式化输出str {}.format()</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#一 外定义参数</span><br>name = <span class="hljs-string">&quot;陈言泷&quot;</span><br>age = 20<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我的名字是&#123;&#125;,我的年龄是&#123;&#125;&quot;</span>.format(name,age))<br><span class="hljs-comment">#二 内定义参数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;姓名:&#123;name&#125;,住址:&#123;url&#125;&quot;</span>.format(<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;陈&quot;</span>,url=&quot;www.com&quot;))<br><span class="hljs-comment">#三 用字典或列表...</span><br></code></pre></td></tr></table></figure><h2 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3.选择结构"></a>3.选择结构</h2><ul><li><p>if else</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">if 判断条件1</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">执行语句1……</span><br><span class="hljs-attribute">elif 判断条件2</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">执行语句2……</span><br><span class="hljs-attribute">elif 判断条件3</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">执行语句3……</span><br><span class="hljs-attribute">else</span><span class="hljs-punctuation">:</span><br>    执行语句4……<br></code></pre></td></tr></table></figure></li><li><p>match</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">num</span>=<span class="hljs-built_in">int</span>(input(<span class="hljs-string">&quot;请输入数字：&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>)<br><br>match <span class="hljs-built_in">num</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数字5&quot;</span>)<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数字4&quot;</span>)<br>    <span class="hljs-keyword">case</span> _:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;.....&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h2><ul><li><p>for循环</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;HELLO&quot;</span>:<br>    <span class="hljs-built_in">print</span>(i) <br>    <br>x=<span class="hljs-string">&quot;HELLO&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> x:<br>    <span class="hljs-built_in">print</span>(i) <br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x)):<br><span class="hljs-built_in">print</span>(x<span class="hljs-selector-attr">[i]</span>)<br></code></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">while</span> 判断条件<span class="hljs-comment">(condition)</span>：<br>    执行语句<span class="hljs-comment">(statements)</span>……<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-序列"><a href="#5-序列" class="headerlink" title="5.序列"></a>5.序列</h2><ul><li>都有索引 切片等功能</li><li>相关内置函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span><span class="hljs-built_in">sorted</span>()函数 默认升序排序，且返回的是一个新的 <span class="hljs-built_in">list</span>，而原来的序列不变 <br><span class="hljs-built_in">sorted</span>(iterable, cmp=<span class="hljs-literal">None</span>, key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>) <br>key 指定可迭代对象中的一个元素来进行排序。<br>reverse = <span class="hljs-literal">True</span>降序，reverse = <span class="hljs-literal">False</span> 升序。<br>示例如下<br><span class="hljs-meta">&gt;&gt;&gt; </span>students = [(<span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">15</span>), (<span class="hljs-string">&#x27;jane&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&#x27;dave&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">sorted</span>(students, key=<span class="hljs-keyword">lambda</span> s: s[<span class="hljs-number">2</span>])            <span class="hljs-comment"># 按年龄排序</span><br>[(<span class="hljs-string">&#x27;dave&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&#x27;jane&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">15</span>)]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">sorted</span>(students, key=<span class="hljs-keyword">lambda</span> s: s[<span class="hljs-number">2</span>], reverse=<span class="hljs-literal">True</span>)       <span class="hljs-comment"># 按降序</span><br>[(<span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">15</span>), (<span class="hljs-string">&#x27;jane&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&#x27;dave&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">10</span>)]<br></code></pre></td></tr></table></figure></li></ul><h3 id="①字符串类型Str"><a href="#①字符串类型Str" class="headerlink" title="①字符串类型Str"></a>①字符串类型Str</h3><p>假设字符串长度为n     正向序列0 ~ n-1    反向序列-n ~ -1</p><p>字符串片段 [start,end,step]    即[start,end） step:步长 每次迈step步 默认为1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span> = <span class="hljs-string">&quot;abcdefg&quot;</span>       #长度n为<span class="hljs-number">7</span><br><span class="hljs-attribute">print</span>(s[<span class="hljs-number">0</span>], s[-<span class="hljs-number">7</span>])  #a a<br><span class="hljs-attribute">print</span>(s[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])       #cde 左闭右开[ ) 即<span class="hljs-number">2</span>~<span class="hljs-number">4</span>  <br><span class="hljs-attribute">print</span>(s[<span class="hljs-number">2</span>:])        #cdefg 从<span class="hljs-number">2</span>到最后    <span class="hljs-number">2</span>~n-<span class="hljs-number">1</span><br><span class="hljs-attribute">print</span>(s[:<span class="hljs-number">5</span>])        #abcde 从最开始到<span class="hljs-number">4</span>  <span class="hljs-number">0</span>~<span class="hljs-number">4</span><br><span class="hljs-attribute">print</span>(s[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])     #ce   <span class="hljs-number">2</span>~<span class="hljs-number">4</span> 但一次迈两步 即只有<span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">print</span>(s[::-<span class="hljs-number">1</span>])      #gfedcba  逆着走 逆序遍历<br><br><span class="hljs-attribute">print</span>(s[:-<span class="hljs-number">1</span>])       #除了最后一个元素，获取其他所有的元素<br></code></pre></td></tr></table></figure><p>字符串其他操作</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">x = <span class="hljs-string">&quot;abc&quot;</span> <br>y = <span class="hljs-string">&quot;def&quot;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(x+y)</span></span>  <span class="hljs-number">#abcdef</span> 字符串拼接<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-number">5</span>*x)</span></span>  <span class="hljs-selector-id">#abcabcabcabcabc</span> 复制x五次<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(x in y)</span></span> <span class="hljs-selector-id">#False</span>  若x在y中 即x是y的子串则输出True 否则 False<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(x not in y)</span></span>  <span class="hljs-selector-id">#True</span> 与上面相反<br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">(str)</span></span><br><span class="hljs-function"><span class="hljs-title">min</span><span class="hljs-params">(str)</span></span><br>str<span class="hljs-selector-class">.count</span>(x)  #字符串str中x的计数<br>str<span class="hljs-selector-class">.index</span>(x)  #字符串str中x的第一个下标<br>str<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&quot;&quot;</span>)  分割字符串，返回字符串列表<br></code></pre></td></tr></table></figure><h3 id="②列表List"><a href="#②列表List" class="headerlink" title="②列表List"></a>②列表List</h3><ul><li><p>列表可变</p></li><li><p>列表创建</p></li></ul>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">lis = [<span class="hljs-string">&quot;HELLO&quot;</span>, <span class="hljs-string">&quot;WORLD&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(lis)           # [<span class="hljs-string">&#x27;HELLO&#x27;</span>, <span class="hljs-string">&#x27;WORLD&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br><br>lis1 = list(<span class="hljs-string">&quot;HELLO&quot;</span>)<br><span class="hljs-built_in">print</span>(lis1)          # [<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>]<br><br>list = []          ## 空列表<br>list.<span class="hljs-built_in">append</span>(<span class="hljs-string">&#x27;Google&#x27;</span>)   ## 使用 <span class="hljs-built_in">append</span>() 添加元素<br>list.<span class="hljs-built_in">append</span>(<span class="hljs-string">&#x27;Runoob&#x27;</span>)<br><span class="hljs-built_in">print</span>(list)          # [<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>]<br><br>list = [i <span class="hljs-keyword">for</span> i in <span class="hljs-keyword">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(list)          # [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><br>list = [i <span class="hljs-keyword">for</span> i in <span class="hljs-keyword">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(list)          # [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><ul><li><p>列表删除</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">list1 = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;physics&#x27;</span>, <span class="hljs-string">&#x27;chemistry&#x27;</span>, 1997, 2000]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list1)</span></span><br><span class="hljs-selector-tag">del</span> list1<span class="hljs-selector-attr">[2]</span> #删除列表中某个元素 <br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list1)</span></span><br><span class="hljs-selector-tag">del</span> list1    #删除整个列表<br></code></pre></td></tr></table></figure></li><li><p>列表增删改查</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">list</span>.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">x</span>)<br><span class="hljs-keyword">list</span>.<span class="hljs-keyword">insert</span>(<span class="hljs-built_in">index</span>,<span class="hljs-keyword">x</span>)<br><span class="hljs-keyword">list</span>.clear()<br><span class="hljs-keyword">list</span>.<span class="hljs-keyword">pop</span>(<span class="hljs-built_in">index</span>)<br><span class="hljs-keyword">list</span>.<span class="hljs-built_in">remove</span>(<span class="hljs-keyword">x</span>)<br><span class="hljs-keyword">list</span>.<span class="hljs-built_in">reverse</span>()<br><span class="hljs-keyword">list</span>.<span class="hljs-keyword">copy</span><br><span class="hljs-keyword">list</span>.<span class="hljs-keyword">sort</span>() 默认升序排序<br>......<br></code></pre></td></tr></table></figure></li><li><p>其他操作与字符串基本一致</p></li></ul><h3 id="③元组Tuple"><a href="#③元组Tuple" class="headerlink" title="③元组Tuple"></a>③元组Tuple</h3><ul><li><p>与列表很相似</p></li><li><p>但元组不可变，也就是元组定义好以后我们不能修改里面的元素，所以无增删改查 只能用del</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs leaf">创建空元组<br>tup1 = ()<br><br>tup = (&quot;hello&quot;,&quot;world&quot;,5,[1,2,3])<br>print(tup)   <span class="hljs-punctuation">#</span><span class="hljs-params">(&#x27;<span class="hljs-variable">hello</span>&#x27;, &#x27;<span class="hljs-variable">world</span>&#x27;, 5, [1, 2, 3])</span><br><br>tup1 = tuple(&quot;hello&quot;)<br>print(tup1)  <span class="hljs-punctuation">#</span><span class="hljs-params">(&#x27;<span class="hljs-variable">h</span>&#x27;, &#x27;<span class="hljs-variable">e</span>&#x27;, &#x27;<span class="hljs-variable">l</span>&#x27;, &#x27;<span class="hljs-variable">l</span>&#x27;, &#x27;<span class="hljs-variable">o</span>&#x27;)</span><br><br>元组中只包含一个元素时，需要在元素后面添加逗号<br>tup1 = (50,)<br>print(type(tup1))  <span class="hljs-punctuation">#</span>&lt;class &#x27;tuple&#x27;&gt;<br>tup1 = (50)<br>print(type(tup1))  <span class="hljs-punctuation">#</span>&lt;class &#x27;int&#x27;&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="④字典Dict"><a href="#④字典Dict" class="headerlink" title="④字典Dict"></a>④字典Dict</h3><ul><li>键值对 key-value</li><li>tips 键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行</li><li>格式 <code>d = &#123;key1 : value1, key2 : value2 &#125;</code></li><li>访问 <code>d[&quot;key1&quot;]</code></li><li>修改 <code>d[&quot;age&quot;] = 8</code></li><li>删除<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tinydict = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Zara&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Class&#x27;</span>: <span class="hljs-string">&#x27;First&#x27;</span>&#125;<br><br><span class="hljs-built_in">del</span> tinydict[<span class="hljs-string">&#x27;Name&#x27;</span>]  <span class="hljs-comment"># 删除键是&#x27;Name&#x27;的条目</span><br>tinydict.clear()      <span class="hljs-comment"># 清空字典所有条目</span><br><span class="hljs-built_in">del</span> tinydict          <span class="hljs-comment"># 删除字典</span><br></code></pre></td></tr></table></figure></li><li>一些内置函数<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">dict = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;cyl&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">100</span>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">key</span> <span class="hljs-keyword">in</span> dict.keys():<br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">key</span>)<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> dict.<span class="hljs-built_in">values</span>():<br>  <span class="hljs-built_in">print</span>(value)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">key</span>,value <span class="hljs-keyword">in</span> dict.items():<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.format(<span class="hljs-built_in">key</span>,value))<br></code></pre></td></tr></table></figure></li></ul><h3 id="⑤集合Set"><a href="#⑤集合Set" class="headerlink" title="⑤集合Set"></a>⑤集合Set</h3><ul><li>无序的不重复元素序列</li><li>创建集合<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">set1</span> = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;           # 直接使用大括号创建集合<br><span class="hljs-attribute">set2</span> = set([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])      # 使用 set() 函数从列表创建集合<br><span class="hljs-attribute">set3</span> = set(<span class="hljs-string">&quot;abswdw&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>两集合间的运算<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;abracadabra&#x27;</span>)<br><span class="hljs-selector-tag">b</span> = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alacazam&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a&amp;b)</span></span> #交集<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a|b)</span></span> #并集<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a-b)</span></span> #差集<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a^b)</span></span> #对称差集<br></code></pre></td></tr></table></figure></li><li>其他操作<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">set.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">x</span>) 添加元素<span class="hljs-keyword">x</span><br>set.remove(<span class="hljs-keyword">x</span>) 移除元素<span class="hljs-keyword">x</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="6-时间和日期"><a href="#6-时间和日期" class="headerlink" title="6.时间和日期"></a>6.时间和日期</h2><ul><li><p>1)打印格式化本地时间</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import <span class="hljs-selector-tag">time</span> <br>x = <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.asctime</span>(<span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.localtime</span>(<span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.time</span>()))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;本地时间是&quot;</span>,x)</span></span><br></code></pre></td></tr></table></figure></li><li><p>2)打印某月日历</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import calendar<br>cal = calendar<span class="hljs-selector-class">.month</span>(<span class="hljs-number">2024</span>,<span class="hljs-number">2</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;打印2024年1月的日历&quot;</span>,cal)</span></span><br></code></pre></td></tr></table></figure></li><li><p>3)….</p></li></ul><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h2><ul><li>基本格式<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">def <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a,b)</span></span>:<br>  <span class="hljs-keyword">return</span> a+b<br><span class="hljs-built_in">print</span>(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(1,2)</span></span>)<br></code></pre></td></tr></table></figure></li><li>各种类型的参数都能传，字符串、列表、元组、字典…. 甚至能传对象obj</li><li>传入不定长参数 *x表示传入一个元组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*x</span>):<br>  <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>      <span class="hljs-built_in">sum</span>+=i<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><span class="hljs-built_in">print</span>(func(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure></li><li>匿名函数 lambda<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">sum</span> = <span class="hljs-built_in">lambda</span> x,y:x+y<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-面向对象"><a href="#8-面向对象" class="headerlink" title="8.面向对象"></a>8.面向对象</h2><ul><li><p>四个点 封装 继承 多态 抽象</p></li><li><p>封装</p><ul><li>类名 类的属性和方法<ul><li>类属性 实例属性</li><li>类对象 实例对象<ul><li>(class 类名)   即创建类对象</li><li>在类外x&#x3D;类名()  即创建实例对象</li></ul></li><li>类方法 实例方法 静态方法<ul><li>类方法用@classmethod标识 类方法第一个默认参数为<em><strong>cls</strong></em> 类方法内只能调用类属性和类方法</li><li>实例方法第一个默认参数为<em><strong>self</strong></em></li><li>静态方法用@staticmethod标识 不需要额外的参数 一般不与实例对象交互 直接用类对象调用 省资源</li></ul></li></ul></li><li>self相当于this指针，因此self可以等价为实例化对象</li><li>两个下划线开头__ 即private 私有属性或方法 </li><li>单下划线开头_ 即proteced 保护属性或方法</li></ul></li><li><p>用装饰器@property @属性名.setter 来调用私有属性(相当于写了get和set函数)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>      <span class="hljs-variable language_">self</span>.__age=<span class="hljs-number">18</span> <span class="hljs-comment"># 私有属性age</span><br>  <span class="hljs-variable">@property</span>    <span class="hljs-comment"># 提供getter</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__age<br>  <span class="hljs-variable">@age</span>.setter  <span class="hljs-comment"># 提供setter</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,x</span>):<br>      <span class="hljs-keyword">if</span> x&lt;<span class="hljs-number">0</span>:<br>          print(<span class="hljs-string">&quot;年龄不能小于0&quot;</span>)<br>      <span class="hljs-symbol">else:</span><br>          <span class="hljs-variable language_">self</span>.__age=x<br><br>xm=<span class="hljs-title class_">People</span>()<br>print(xm.age) <span class="hljs-comment"># 实质上是调用了与私有属性age同名的getter函数</span><br>xm.age=<span class="hljs-number">20</span>     <span class="hljs-comment"># 实质上是调用了与私有属性age同名的setter函数，并传入实参20</span><br>print(xm.age) <span class="hljs-comment"># 同理</span><br></code></pre></td></tr></table></figure></li><li><p>类的专有方法(魔术方法)</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-number">1</span>.__new__():      <span class="hljs-keyword">new</span>一个对象  也会自动调用<br><span class="hljs-number">2</span>.__init__(<span class="hljs-variable language_">self</span>): 构造函数 在类实例化时会自动调用<br><span class="hljs-number">3</span>.__del__(<span class="hljs-variable language_">self</span>):  析构函数 同样自动调用<br><span class="hljs-number">4</span>.__str__(<span class="hljs-variable language_">self</span>):  自定义输出字符串<br><br><span class="hljs-keyword">new</span>比init更早执行 即要先<span class="hljs-keyword">new</span>出一个对象，然后再init初始化<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>:<br>  name=<span class="hljs-string">&quot;&quot;</span><span class="hljs-meta">  #类属性</span><br>  def __init__(<span class="hljs-variable language_">self</span>, name, gender, age, play):<br>      <span class="hljs-variable language_">self</span>.name = name<span class="hljs-meta">       #实例属性</span><br>      <span class="hljs-variable language_">self</span>.gender = gender<br>      <span class="hljs-variable language_">self</span>.age = age<br>      <span class="hljs-variable language_">self</span>.play = play<br>  def eat(<span class="hljs-variable language_">self</span>, food):<br>      <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&quot;喜欢吃&quot;</span> + food)<br>  def __str__(<span class="hljs-variable language_">self</span>):<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&quot;爱玩&quot;</span> + <span class="hljs-variable language_">self</span>.play<br><br>x1 = People(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;CSGO&quot;</span>)<span class="hljs-meta">  # init构造函数自动调用</span><br>x1.eat(<span class="hljs-string">&quot;西瓜&quot;</span>)<br><span class="hljs-built_in">print</span>(x1.name, x1.gender, x1.age)<br><span class="hljs-built_in">print</span>(x1)<span class="hljs-meta">  # str 让实例对象自定义输出</span><br></code></pre></td></tr></table></figure></li><li><p>类外动态绑定属性和方法，并用__slots__变量限制要添加的属性</p><ul><li><code>__slot__ =(属性，属性)</code> 只有slots变量内的属性才可在类外动态添加，slots变量的属性子类不会继承，需要在子类中再声明slots</li></ul></li><li><p>继承(单继承 多继承)</p><ul><li><p>方法可以被重写覆盖</p></li><li><p>super() 用于调用父类中的函数</p></li><li><p>单继承 <code>class 子类（父类）</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Animal是父类 Dog Cat是继承的子类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    name=<span class="hljs-string">&quot;&quot;</span><br>    age=<span class="hljs-string">&quot;&quot;</span><br>    gender=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,gender</span>):<br>        self.name=name<br>        self.age=age<br>        self.gender=gender<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;它正在吃饭~~~&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;它睡着了~~~&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    hobby=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># 子类重写了父类的构造函数，并用super函数调用了父类的构造函数</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, gender, hobby</span>):<br>        Animal.__init__(self,name,age,gender)  <span class="hljs-comment"># 直接调用父类Animal的函数</span><br>        <span class="hljs-comment"># super.__init__(name,age,gender)</span><br>        self.hobby = hobby<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&quot;在吃饭&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&quot;睡着了&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().sleep()  <span class="hljs-comment"># 在类内用super函数调用了父类中已被覆盖的sleep函数</span><br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&quot;在狗叫&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.name+<span class="hljs-string">&quot;年龄是&quot;</span>+self.age+<span class="hljs-string">&quot;岁,爱好是&quot;</span>+self.hobby<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&quot;在吃饭&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&quot;睡着了&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mew</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&quot;在喵叫&quot;</span>)<br><br>a=Dog(<span class="hljs-string">&quot;贝拉&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;girl&quot;</span>,<span class="hljs-string">&quot;ball&quot;</span>)<br>a.bark()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">super</span>(Dog,a).eat()  <span class="hljs-comment"># 在类外用super函数调用对象a父类中已被覆盖的eat函数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*&quot;</span>*<span class="hljs-number">40</span>)<br><br>b=Cat(<span class="hljs-string">&quot;多多&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;boy&quot;</span>)<br>b.mew()<br>b.eat()<br></code></pre></td></tr></table></figure></li><li><p>多继承 <code>class 子类(父类1,父类2)</code></p><ul><li>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。 即广度优先查找</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 见上面代码</span><br><span class="hljs-keyword">class</span> faker(<span class="hljs-title class_">Dog</span>,<span class="hljs-title class_">Cat</span>):<br>  theme=<span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>,name,age,gender,hobby,theme</span>):<br>      <span class="hljs-title class_">Dog</span>.__init__(<span class="hljs-variable language_">self</span>,name,age,gender,hobby)<br>      <span class="hljs-variable language_">self</span>.theme=theme<br><br>a1=faker(<span class="hljs-string">&quot;狗猫&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;mixed&quot;</span>,<span class="hljs-string">&quot;play football&quot;</span>,<span class="hljs-string">&quot;PEACE&amp;LOVE&quot;</span>)<br>a1.sleep()<br></code></pre></td></tr></table></figure></li></ul></li><li><p>多态 不同对象调用同一函数 结果是不同的(方法重写)</p>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">talk</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>    print(<span class="hljs-string">&quot;None&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>    print(<span class="hljs-string">&quot;动物在睡觉&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">talk</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">&quot;汪汪叫&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">&quot;小狗在睡觉&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">talk</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">&quot;喵喵叫&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">&quot;小猫在睡觉&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dragon</span>(<span class="hljs-title class_">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">talk</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">&quot;轰轰轰&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(<span class="hljs-string">&quot;小龙在睡觉&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">obj</span>):<br>    obj.sleep()<br><br>lis=[<span class="hljs-title class_">Dog</span>(),<span class="hljs-title class_">Cat</span>(),<span class="hljs-title class_">Dragon</span>()]<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-symbol">lis:</span><br>    func(item)<br>    <br></code></pre></td></tr></table></figure></li><li><p>单例模式</p></li></ul><h2 id="9-异常处理"><a href="#9-异常处理" class="headerlink" title="9.异常处理"></a>9.异常处理</h2><ul><li><code>try-except-else-finally</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 可能出现错误的代码块</span><br>    <span class="hljs-built_in">print</span>(b)<br><span class="hljs-keyword">except</span> NameError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-comment"># 异常之后的执行的代码块 捕获NameError异常 其他无法捕获</span><br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> msg: <br>    <span class="hljs-comment"># 异常之后的执行的代码块 Exception可以捕获大部分异常</span><br>    <span class="hljs-built_in">print</span>(msg)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果try中没有异常，则执行else代码块，否则不执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这段代码没有错误&quot;</span>)<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-comment"># 异常与否，都会执行finally代码块</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误与否，我都会执行&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>用户自定义异常<ul><li>创建一个异常类，要继承Exception类</li><li>要用raise主动抛出自定义异常<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TooLongMyException</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,lenth</span>):<br>        self.lenth=lenth<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;您输入的名字长度为&#123;&#125;，太长啦，请修改&quot;</span>.<span class="hljs-built_in">format</span>(self.lenth)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Name</span>():<br>    name=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入您的名字：&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name)&gt;<span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">raise</span> TooLongMyException(<span class="hljs-built_in">len</span>(name))<br>    <span class="hljs-keyword">except</span> TooLongMyException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        Name()     <span class="hljs-comment"># 捕获异常后重新调用Name()</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(name)<br>        <br>Name()<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>语言语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yaml基本语法</title>
    <link href="/2024/08/14/Yaml%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/08/14/Yaml%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>YAML 是专门用来写配置文件的语言，实质上是一种纯文本语言。</p><p>格式有 <code>.yaml</code>或<code>.yml</code></p><span id="more"></span><p>1.基本语法规则如下：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code>表示注释</li></ul><p>2.YAML 支持的数据结构有三种：</p><ul><li>对象：键值对的集合，又称为映射（mapping）&#x2F; 哈希（hashes） &#x2F; 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） &#x2F; 列表（list）</li><li>纯量（scalars）：单个的、不可再分的值。（数字，字符串……）</li></ul><h1 id="二、对象"><a href="#二、对象" class="headerlink" title="二、对象"></a>二、对象</h1><p>对象的一组键值对，使用冒号结构表示。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">animal</span>: pets<br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">animal</span>: <span class="hljs-string">&#x27;pets&#x27;</span> &#125;<br></code></pre></td></tr></table></figure></blockquote><h1 id="三、数组（列表）"><a href="#三、数组（列表）" class="headerlink" title="三、数组（列表）"></a>三、数组（列表）</h1><p>一组连词线开头的行，构成一个数组。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">- <span class="hljs-title class_">Cat</span><br>- <span class="hljs-title class_">Dog</span><br>- <span class="hljs-title class_">Goldfish</span><br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[ <span class="hljs-string">&#x27;Cat&#x27;</span>, <span class="hljs-string">&#x27;Dog&#x27;</span>, <span class="hljs-string">&#x27;Goldfish&#x27;</span> ]<br></code></pre></td></tr></table></figure></blockquote><h1 id="四、纯量"><a href="#四、纯量" class="headerlink" title="四、纯量"></a>四、纯量</h1><p>以下数据类型都属于 JavaScript 的纯量。</p><blockquote><ul><li>字符串</li><li>布尔值</li><li>整数</li><li>浮点数</li><li>Null</li><li>时间</li><li>日期</li></ul></blockquote><h2 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h2><p>字符串是最常见，也是最复杂的一种数据类型。</p><p>字符串默认不使用引号表示。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">str</span>: 这是一行字符串<br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;这是一行字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure></blockquote><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">str</span>: 这是一段<br>  多行<br>  字符串<br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;这是一段 多行 字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="2-布尔值"><a href="#2-布尔值" class="headerlink" title="2.布尔值"></a>2.布尔值</h2><p>布尔值用<code>true</code>和<code>false</code>表示。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">isSet</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">isSet</span>: <span class="hljs-literal">true</span> &#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="3-数字"><a href="#3-数字" class="headerlink" title="3.数字"></a>3.数字</h2><p>数值直接以字面量的形式表示。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">number</span>: <span class="hljs-number">12.30</span><br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">number</span>: <span class="hljs-number">12.30</span> &#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="4-Null"><a href="#4-Null" class="headerlink" title="4.Null"></a>4.Null</h2><p><code>null</code>用<code>~</code>表示。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">parent</span>: ~ <br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">parent</span>: <span class="hljs-literal">null</span> &#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="5-时间和日期"><a href="#5-时间和日期" class="headerlink" title="5.时间和日期"></a>5.时间和日期</h2><p>时间采用 ISO8601 格式。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">iso8601</span>: <span class="hljs-number">2001</span>-<span class="hljs-number">12</span>-14<span class="hljs-attr">t21</span>:<span class="hljs-number">59</span>:<span class="hljs-number">43.10</span>-<span class="hljs-number">05</span>:<span class="hljs-number">00</span> <br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">iso8601</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2001-12-14t21:59:43.10-05:00&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure></blockquote><p>日期采用复合 iso8601 格式的年、月、日表示。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">date</span>: <span class="hljs-number">1976</span>-<span class="hljs-number">07</span>-<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">date</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;1976-07-31&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure></blockquote><h1 id="5-函数和正则表达式的转换"><a href="#5-函数和正则表达式的转换" class="headerlink" title="5.函数和正则表达式的转换"></a>5.函数和正则表达式的转换</h1><p>这是 <a href="https://github.com/nodeca/js-yaml">JS-YAML</a> 库特有的功能，可以把函数和正则表达式转为字符串。</p>]]></content>
    
    
    <categories>
      
      <category>语言语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Yaml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>掌握Github的使用</title>
    <link href="/2024/08/07/%E6%8E%8C%E6%8F%A1Github%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/08/07/%E6%8E%8C%E6%8F%A1Github%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="掌握Github的使用"><a href="#掌握Github的使用" class="headerlink" title="掌握Github的使用"></a>掌握Github的使用</h1><span id="more"></span><p><a href="https://west2-online.feishu.cn/wiki/Lsz9w3CiGinXzgkevtmceHZknrf">Git&amp;Github - 飞书云文档 (feishu.cn)</a></p><h2 id="一-了解Git和Github"><a href="#一-了解Git和Github" class="headerlink" title="一.了解Git和Github"></a>一.了解Git和Github</h2><h3 id="1-什么是Git？"><a href="#1-什么是Git？" class="headerlink" title="1.什么是Git？"></a>1.什么是Git？</h3><p>​Git就是代码版本管理工具</p><h3 id="2-为什么要使用Git"><a href="#2-为什么要使用Git" class="headerlink" title="2.为什么要使用Git"></a>2.为什么要使用Git</h3><ul><li><strong>版本控制</strong> 保留了代码过去版本 </li><li><strong>分支管理</strong>  可以开发多个分支，最后再合并到主分支</li><li><strong>团队协作</strong> 并行开发 隔离错误 审查和讨论  保持主分支的稳定性</li></ul><h3 id="3-什么是Github"><a href="#3-什么是Github" class="headerlink" title="3.什么是Github"></a>3.什么是Github</h3><p>GitHub是一个基于Git的世界上最大的&#x3D;&#x3D;代码托管平台&#x3D;&#x3D;，同时也是一个&#x3D;&#x3D;开源社区&#x3D;&#x3D;，有很多不错的项目值得大家去创作。</p><p>它让开发者能够更好地进行代码管理和共同创作。我们用Git保存到本地后，就可以push(推送)到GitHub上，托管我们的代码，别人也可以pull(拉取)我们的代码，通过这种方式保存代码和进行团队协作</p><h2 id="二-安装并配置Git"><a href="#二-安装并配置Git" class="headerlink" title="二.安装并配置Git"></a>二.安装并配置Git</h2><p><a href="https://west2-online.feishu.cn/wiki/Iv8owApYwinn0akMpaQciUDanCb">在各个系统上安装git - 飞书云文档 (feishu.cn)</a></p><h2 id="三-Git基本命令"><a href="#三-Git基本命令" class="headerlink" title="三.Git基本命令"></a>三.Git基本命令</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">首先定位到想要存放源码的目录<br>目录中右键打开git <span class="hljs-keyword">bash</span><br><span class="hljs-keyword"></span>输入以下命令：<br><br>git <span class="hljs-built_in">config</span> --global user.email <span class="hljs-number">123</span>@qq.com <span class="hljs-comment"># 设置你的git的电子邮箱地址，替换自己的邮箱</span><br>git <span class="hljs-built_in">config</span> --global user.name zhangsan <span class="hljs-comment"># 设置你的git的名称，替换为自己的名称 </span><br><span class="hljs-comment"># 邮箱姓名设置一次过后，以后就不用再设置了</span><br><br>git init                            <span class="hljs-comment"># 把这个文件夹初始化，并建立一个暂存区</span><br>git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span>要连接的仓库网址 <span class="hljs-comment"># 实现本地和远程仓库的连接 并将远程仓库命名为origin</span><br>git <span class="hljs-keyword">branch </span>-M main                  <span class="hljs-comment"># 切换到main分支</span><br>echo <span class="hljs-string">&quot;# Hello World&quot;</span> &gt; README.md    <span class="hljs-comment"># 将&quot;# Hello World!&quot; 输入到README.md文件</span><br>                                    <span class="hljs-comment"># 如果不存在README.md文件会自动创建一个</span><br><span class="hljs-comment"># 这时候，相对于暂存区，我们的文件夹是发生了变化的</span><br>git <span class="hljs-keyword">add </span>.                           <span class="hljs-comment"># 把所有发生了变化的文件提交到暂存区</span><br><span class="hljs-comment"># 也可以用 git add xx文件 指定一个文件提交到暂存区</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span>        <span class="hljs-comment"># 将暂存区的变化设置备注为first commit 即设置提交消息</span><br>git push -u <span class="hljs-keyword">origin </span>main             <span class="hljs-comment"># 将你的代码push到远程仓库 暂存区会被清空`</span><br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 理解：commit就是把一个个变化打包成一个个所谓的包裹，然后我们push的时候就是把这些包裹推送到远程仓库</span><br><br><span class="hljs-meta"># 后续如果要继续把本地文件上传到仓库里的话，只需要执行后三个命令</span><br>git <span class="hljs-keyword">add</span> .  <span class="hljs-meta"># 这里涉及一个Git忽略文件.gitignore的使用</span><br>git commit -m <span class="hljs-string">&quot;xxx&quot;</span>       <span class="hljs-meta"># 这里就涉及到了一个规范commit的问题</span><br>git <span class="hljs-keyword">push</span> -u origin main<br></code></pre></td></tr></table></figure><h2 id="四-Pull-Request-PR"><a href="#四-Pull-Request-PR" class="headerlink" title="四.Pull Request(PR)"></a>四.Pull Request(PR)</h2><p>​PR 的主要应用场景是在对他人的 Git 仓库本地修改后进行代码提交，在这个过程中可以与仓库所有者进行交流，并且完善代码。</p><p>​大致流程:你想要修改某仓库的代码，但是这个仓库你没有操作权限，所以需要复制一份(Fork)给你自己的账号，然后作出修改(commit)，最后提交回去(PR)</p><p>​具体操作:</p><ul><li><p>1.fork某仓库</p></li><li><p>2.将复制的仓库clone到本地   自己指定一个本地文件夹打开git bash <code>git clone 自己github所复制仓库的url </code></p></li><li><p>3.修改本地文件夹</p></li><li><p>4.提交代码</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .  <br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;xxx&quot;</span>      <br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -u origin main<br></code></pre></td></tr></table></figure></li><li><p>5.发起Pull Request</p><p>在自己所复制仓库中点击’contribute’  -&gt;  ‘open pull request’</p><p>&#x3D;&#x3D;在 Pull Request 创建后，仍可以继续 Commit, Push 来补充修改，新的 Commit 将自动附加到这个 PR 末尾&#x3D;&#x3D;，也就是你无需为了修改当前 PR 的一些内容而开新的 PR。</p><p><img src="https://s2.loli.net/2024/04/30/hys1DqMJnHAYVFw.png" alt="image-20240430151555405"></p></li></ul><p>​参考文章：</p><ul><li><a href="https://west2-online.feishu.cn/wiki/L1ItwNiQEi5ZIik8mIqc7GDQniV">完成第一次PR  </a></li><li><a href="https://west2-online.feishu.cn/wiki/Zvqow0CUxig3iWkWQgBcHp4AnHe">西二-如何提交你的作业</a></li></ul><h2 id="五-规范Commit"><a href="#五-规范Commit" class="headerlink" title="五.规范Commit"></a>五.规范Commit</h2><p>commit message 格式：<code>type(scope):subject</code></p><p>举例：<code>fix(DAO):用户查询缺少username属性</code> </p><ul><li><p><strong>type(必须)</strong></p><p>用于说明git commit的类别，只允许使用下面的标识。</p><ul><li>feat：新功能（feature）</li><li>fix&#x2F;to：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。</li><li>docs：文档（documentation）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）。</li><li>test：增加测试。</li><li>merge：代码合并。</li><li>perf：优化相关，比如提升性能、体验。</li></ul></li><li><p><strong>scope(可选)</strong></p><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p></li><li><p><strong>subject(必须)</strong></p><p>subject是commit目的的简短描述，不超过50个字符</p></li></ul><h2 id="六-Github官网各种功能"><a href="#六-Github官网各种功能" class="headerlink" title="六.Github官网各种功能"></a>六.Github官网各种功能</h2><ul><li><p>查看库的历史Commit</p><p><img src="https://s2.loli.net/2024/04/30/fmXDMH5PCKZ6AW2.png" alt="Snipaste_2024-04-29_19-28-11"></p></li></ul><p>​</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="/2024/05/06/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/05/06/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><span id="more"></span><h2 id="一-标题"><a href="#一-标题" class="headerlink" title="一. 标题"></a>一. 标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><h2 id="二-段落格式"><a href="#二-段落格式" class="headerlink" title="二.段落格式"></a>二.段落格式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 列表 （可嵌套）<br><span class="hljs-emphasis">*斜体*</span>   <br><span class="hljs-strong">**粗体**</span>  <br><span class="hljs-strong">**<span class="hljs-emphasis">*粗斜体*</span>**</span>  <br>---分割线  <br>~~删除线~~    <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br>==高亮==<br></code></pre></td></tr></table></figure><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三.代码"></a>三.代码</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`段落一行的代码`<br><br>```代码块``` <br></code></pre></td></tr></table></figure><h2 id="四-超链接"><a href="#四-超链接" class="headerlink" title="四.超链接"></a>四.超链接</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">链接名称</span>](<span class="hljs-name">网址</span>)<br></code></pre></td></tr></table></figure><p>示例：<a href="https://www.bilibili.com/">这是一个超链接,点我</a> </p><hr><h2 id="五-图片"><a href="#五-图片" class="headerlink" title="五.图片"></a>五.图片</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[文本属性]</span>(图片地址)<br></code></pre></td></tr></table></figure><p>示例<br><img src="https://s2.loli.net/2024/05/06/qxPnkmGHwKEClRX.webp" alt="一个小可爱"></p>]]></content>
    
    
    <categories>
      
      <category>语言语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/05/hello-world/"/>
    <url>/2024/05/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
