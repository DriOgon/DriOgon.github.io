<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>什么是Front-Matter</title>
    <link href="/2024/08/08/%E4%BB%80%E4%B9%88%E6%98%AFFront-Matter/"/>
    <url>/2024/08/08/%E4%BB%80%E4%B9%88%E6%98%AFFront-Matter/</url>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/front-matter">Front-Matter 请点我跳转</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>掌握Github的使用</title>
    <link href="/2024/08/07/%E6%8E%8C%E6%8F%A1Github%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/08/07/%E6%8E%8C%E6%8F%A1Github%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="掌握Github的使用"><a href="#掌握Github的使用" class="headerlink" title="掌握Github的使用"></a>掌握Github的使用</h1><span id="more"></span><p><a href="https://west2-online.feishu.cn/wiki/Lsz9w3CiGinXzgkevtmceHZknrf">Git&amp;Github - 飞书云文档 (feishu.cn)</a></p><h2 id="一-了解Git和Github"><a href="#一-了解Git和Github" class="headerlink" title="一.了解Git和Github"></a>一.了解Git和Github</h2><h3 id="1-什么是Git？"><a href="#1-什么是Git？" class="headerlink" title="1.什么是Git？"></a>1.什么是Git？</h3><p>​Git就是代码版本管理工具</p><h3 id="2-为什么要使用Git"><a href="#2-为什么要使用Git" class="headerlink" title="2.为什么要使用Git"></a>2.为什么要使用Git</h3><ul><li><strong>版本控制</strong> 保留了代码过去版本 </li><li><strong>分支管理</strong>  可以开发多个分支，最后再合并到主分支</li><li><strong>团队协作</strong> 并行开发 隔离错误 审查和讨论  保持主分支的稳定性</li></ul><h3 id="3-什么是Github"><a href="#3-什么是Github" class="headerlink" title="3.什么是Github"></a>3.什么是Github</h3><p>GitHub是一个基于Git的世界上最大的&#x3D;&#x3D;代码托管平台&#x3D;&#x3D;，同时也是一个&#x3D;&#x3D;开源社区&#x3D;&#x3D;，有很多不错的项目值得大家去创作。</p><p>它让开发者能够更好地进行代码管理和共同创作。我们用Git保存到本地后，就可以push(推送)到GitHub上，托管我们的代码，别人也可以pull(拉取)我们的代码，通过这种方式保存代码和进行团队协作</p><h2 id="二-安装并配置Git"><a href="#二-安装并配置Git" class="headerlink" title="二.安装并配置Git"></a>二.安装并配置Git</h2><p><a href="https://west2-online.feishu.cn/wiki/Iv8owApYwinn0akMpaQciUDanCb">在各个系统上安装git - 飞书云文档 (feishu.cn)</a></p><h2 id="三-Git基本命令"><a href="#三-Git基本命令" class="headerlink" title="三.Git基本命令"></a>三.Git基本命令</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">首先定位到想要存放源码的目录<br>目录中右键打开git <span class="hljs-keyword">bash</span><br><span class="hljs-keyword"></span>输入以下命令：<br><br>git <span class="hljs-built_in">config</span> --global user.email <span class="hljs-number">123</span>@qq.com <span class="hljs-comment"># 设置你的git的电子邮箱地址，替换自己的邮箱</span><br>git <span class="hljs-built_in">config</span> --global user.name zhangsan <span class="hljs-comment"># 设置你的git的名称，替换为自己的名称 </span><br><span class="hljs-comment"># 邮箱姓名设置一次过后，以后就不用再设置了</span><br><br>git init                            <span class="hljs-comment"># 把这个文件夹初始化，并建立一个暂存区</span><br>git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span>要连接的仓库网址 <span class="hljs-comment"># 实现本地和远程仓库的连接 并将远程仓库命名为origin</span><br>git <span class="hljs-keyword">branch </span>-M main                  <span class="hljs-comment"># 切换到main分支</span><br>echo <span class="hljs-string">&quot;# Hello World&quot;</span> &gt; README.md    <span class="hljs-comment"># 将&quot;# Hello World!&quot; 输入到README.md文件</span><br>                                    <span class="hljs-comment"># 如果不存在README.md文件会自动创建一个</span><br><span class="hljs-comment"># 这时候，相对于暂存区，我们的文件夹是发生了变化的</span><br>git <span class="hljs-keyword">add </span>.                           <span class="hljs-comment"># 把所有发生了变化的文件提交到暂存区</span><br><span class="hljs-comment"># 也可以用 git add xx文件 指定一个文件提交到暂存区</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span>        <span class="hljs-comment"># 将暂存区的变化设置备注为first commit 即设置提交消息</span><br>git push -u <span class="hljs-keyword">origin </span>main             <span class="hljs-comment"># 将你的代码push到远程仓库 暂存区会被清空`</span><br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 理解：commit就是把一个个变化打包成一个个所谓的包裹，然后我们push的时候就是把这些包裹推送到远程仓库</span><br><br><span class="hljs-meta"># 后续如果要继续把本地文件上传到仓库里的话，只需要执行后三个命令</span><br>git <span class="hljs-keyword">add</span> .  <span class="hljs-meta"># 这里涉及一个Git忽略文件.gitignore的使用</span><br>git commit -m <span class="hljs-string">&quot;xxx&quot;</span>       <span class="hljs-meta"># 这里就涉及到了一个规范commit的问题</span><br>git <span class="hljs-keyword">push</span> -u origin main<br></code></pre></td></tr></table></figure><h2 id="四-Pull-Request-PR"><a href="#四-Pull-Request-PR" class="headerlink" title="四.Pull Request(PR)"></a>四.Pull Request(PR)</h2><p>​PR 的主要应用场景是在对他人的 Git 仓库本地修改后进行代码提交，在这个过程中可以与仓库所有者进行交流，并且完善代码。</p><p>​大致流程:你想要修改某仓库的代码，但是这个仓库你没有操作权限，所以需要复制一份(Fork)给你自己的账号，然后作出修改(commit)，最后提交回去(PR)</p><p>​具体操作:</p><ul><li><p>1.fork某仓库</p></li><li><p>2.将复制的仓库clone到本地   自己指定一个本地文件夹打开git bash <code>git clone 自己github所复制仓库的url </code></p></li><li><p>3.修改本地文件夹</p></li><li><p>4.提交代码</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .  <br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;xxx&quot;</span>      <br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -u origin main<br></code></pre></td></tr></table></figure></li><li><p>5.发起Pull Request</p><p>在自己所复制仓库中点击’contribute’  -&gt;  ‘open pull request’</p><p>&#x3D;&#x3D;在 Pull Request 创建后，仍可以继续 Commit, Push 来补充修改，新的 Commit 将自动附加到这个 PR 末尾&#x3D;&#x3D;，也就是你无需为了修改当前 PR 的一些内容而开新的 PR。</p><p><img src="https://s2.loli.net/2024/04/30/hys1DqMJnHAYVFw.png" alt="image-20240430151555405"></p></li></ul><p>​参考文章：</p><ul><li><a href="https://west2-online.feishu.cn/wiki/L1ItwNiQEi5ZIik8mIqc7GDQniV">完成第一次PR  </a></li><li><a href="https://west2-online.feishu.cn/wiki/Zvqow0CUxig3iWkWQgBcHp4AnHe">西二-如何提交你的作业</a></li></ul><h2 id="五-规范Commit"><a href="#五-规范Commit" class="headerlink" title="五.规范Commit"></a>五.规范Commit</h2><p>commit message 格式：<code>type(scope):subject</code></p><p>举例：<code>fix(DAO):用户查询缺少username属性</code> </p><ul><li><p><strong>type(必须)</strong></p><p>用于说明git commit的类别，只允许使用下面的标识。</p><ul><li>feat：新功能（feature）</li><li>fix&#x2F;to：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。</li><li>docs：文档（documentation）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）。</li><li>test：增加测试。</li><li>merge：代码合并。</li><li>perf：优化相关，比如提升性能、体验。</li></ul></li><li><p><strong>scope(可选)</strong></p><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p></li><li><p><strong>subject(必须)</strong></p><p>subject是commit目的的简短描述，不超过50个字符</p></li></ul><h2 id="六-Github官网各种功能"><a href="#六-Github官网各种功能" class="headerlink" title="六.Github官网各种功能"></a>六.Github官网各种功能</h2><ul><li><p>查看库的历史Commit</p><p><img src="https://s2.loli.net/2024/04/30/fmXDMH5PCKZ6AW2.png" alt="Snipaste_2024-04-29_19-28-11"></p></li></ul><p>​</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="/2024/05/06/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/05/06/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><span id="more"></span><h2 id="一-标题"><a href="#一-标题" class="headerlink" title="一. 标题"></a>一. 标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><h2 id="二-段落格式"><a href="#二-段落格式" class="headerlink" title="二.段落格式"></a>二.段落格式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 列表 （可嵌套）<br><span class="hljs-emphasis">*斜体*</span>   <br><span class="hljs-strong">**粗体**</span>  <br><span class="hljs-strong">**<span class="hljs-emphasis">*粗斜体*</span>**</span>  <br>---分割线  <br>~~删除线~~    <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br>==高亮==<br></code></pre></td></tr></table></figure><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三.代码"></a>三.代码</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`段落一行的代码`<br><br>```代码块``` <br></code></pre></td></tr></table></figure><h2 id="四-超链接"><a href="#四-超链接" class="headerlink" title="四.超链接"></a>四.超链接</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">链接名称</span>](<span class="hljs-name">网址</span>)<br></code></pre></td></tr></table></figure><p>示例：<a href="https://www.bilibili.com/">这是一个超链接,点我</a> </p><hr><h2 id="五-图片"><a href="#五-图片" class="headerlink" title="五.图片"></a>五.图片</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[文本属性]</span>(图片地址)<br></code></pre></td></tr></table></figure><p>示例<br><img src="https://s2.loli.net/2024/05/06/qxPnkmGHwKEClRX.webp" alt="一个小可爱"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/05/hello-world/"/>
    <url>/2024/05/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
